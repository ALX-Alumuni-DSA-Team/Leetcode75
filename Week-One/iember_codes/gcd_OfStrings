class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        # Helper function to compute the greatest common divisor
        def gcd(a: int, b: int) -> int:
            while b:
                a, b = b, a % b
            return a
        
        # Check if string t can divide string s
        def canDivide(s: str, t: str) -> bool:
            return s == t * (len(s) // len(t))
        
        # Compute the GCD of the lengths of str1 and str2
        len1, len2 = len(str1), len(str2)
        gcd_len = gcd(len1, len2)
        
        # Candidate substring that might be the gcd string
        candidate = str1[:gcd_len]
        
        # Check if the candidate divides both str1 and str2
        if canDivide(str1, candidate) and canDivide(str2, candidate):
            return candidate
        return ""

# Example usage:
# solution = Solution()
# print(solution.gcdOfStrings("ABCABC", "ABC"))  # Output: "ABC"
# print(solution.gcdOfStrings("ABABAB", "ABAB"))  # Output: "AB"
# print(solution.gcdOfStrings("LEET", "CODE"))    # Output: ""
